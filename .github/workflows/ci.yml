name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main, develop ]

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:"Html;MarkdownSummaryGithub;Cobertura" -assemblyfilters:"+ResilientHttpClient.Core;+ResilientHttpClient.Extensions.DependencyInjection;-*.Tests;-*.Demo"
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport/
        
    - name: Display coverage summary
      run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash
      
    - name: Check coverage threshold
      run: |
        $coverage = (Select-Xml -Path "coveragereport/Cobertura.xml" -XPath "/coverage/@line-rate").Node.Value
        $coveragePercent = [math]::Round([double]$coverage * 100, 2)
        Write-Host "Current coverage: $coveragePercent%"
        if ($coveragePercent -lt 80) {
          Write-Error "Coverage $coveragePercent% is below the 80% threshold!"
          exit 1
        }
      shell: pwsh
      
  publish-nuget:
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Pack Core NuGet package
      run: dotnet pack ResilientHttpClient.Core/ResilientHttpClient.Core.csproj --configuration Release --no-build --output ./artifacts
      
    - name: Pack DI Extension NuGet package
      run: dotnet pack ResilientHttpClient.Extensions.DependencyInjection/ResilientHttpClient.Extensions.DependencyInjection.csproj --configuration Release --no-build --output ./artifacts
      
    - name: Push to NuGet
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
